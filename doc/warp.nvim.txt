*warp.nvim.txt*

Warp is a lightweight project-local buffer list for Neovim — add, view, jump, reorder, and remove buffers, all from a floating window.

`warp.nvim` provides a per-project list of important files, allowing you to quickly return to them later. think of it as “buffer bookmarks,” scoped to your git repo (or any project root).

It's inspired by https://github.com/ThePrimeagen/harpoon, but with a simpler goal: do one thing well. No terminals, no fancy workflows — just files you care about, saved per project.

==============================================================================
Table of Contents                                                *warp.nvim.toc*

API ···························································· |warp.nvim.api|
Configurations ·············································· |warp.nvim.config|
List ·························································· |warp.nvim.list|
Storage ···················································· |warp.nvim.storage|
UI ······························································ |warp.nvim.ui|
Utilities ···················································· |warp.nvim.utils|
Notifier ·················································· |warp.nvim.notifier|
Builtins ·················································· |warp.nvim.builtins|
Events ······················································ |warp.nvim.events|
Types ························································ |warp.nvim.types|

==============================================================================
API                                                              *warp.nvim.api*

M.setup                                                    *warp.nvim.api.setup*
    Entry point to setup the plugin

    Type: ~
        (fun(user_config?:Warp.Config))

    See: ~
        |warp.nvim.config.config|
        |warp.nvim.types.Warp.Config|

    Usage: ~
>lua
        require('warp').setup(opts)
<


M.add()                                                      *warp.nvim.api.add*
    Add current buffer to list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').add() or ':WarpAddFile'
<


M.add_all_onscreen()                            *warp.nvim.api.add_all_onscreen*
    Add all on screen buffer to list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').add_all_onscreen() or ':WarpAddOnScreenFiles'
<


M.del()                                                      *warp.nvim.api.del*
    Remove current buffer from warp list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').del() or ':WarpDelFile'
<


M.move_to({direction_or_index})                          *warp.nvim.api.move_to*
    Move current buffer to a new index in list

    Parameters: ~
        {direction_or_index}  (Warp.Config.MoveDirection|number)  The direction or index to move to

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').move_to('prev') or ':WarpMoveTo prev'
<


M.show_list()                                          *warp.nvim.api.show_list*
    Show the list item in window

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').show_list() or ':WarpShowList'
<


M.clear_current_list()                        *warp.nvim.api.clear_current_list*
    Clear current project's list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').clear_current_list()
<


M.clear_all_list()                                *warp.nvim.api.clear_all_list*
    Clear all the lists across all projects

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').clear_all_list()
<


M.goto_index({direction_or_index})                    *warp.nvim.api.goto_index*
    Navigate to a file from warp list by index or direction

    Parameters: ~
        {direction_or_index}  (Warp.Config.MoveDirection|number)  The direction or index to move to

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').goto_index(1) or ':WarpGoToIndex 1'
<


M.on_file_update                                  *warp.nvim.api.on_file_update*
    Update entries if file or folder was updated

    Type: ~
        (fun(from:string,to:string):nil)

    See: ~
        |warp.nvim.list.action.on_file_update|

    Usage: ~
>lua
        vim.api.nvim_create_autocmd("User", {
          group = augroup,
          pattern = { "MiniFilesActionRename", "MiniFilesActionMove" },
          callback = function(ev)
            local from, to = ev.data.from, ev.data.to
            require("warp").on_file_update(from, to)
          end,
        })
<


M.get_item_by_buf                                *warp.nvim.api.get_item_by_buf*
    Find the item of an entry by buffer

    Type: ~
        (fun(buf:number):{entry:Warp.ListItem,index:number}|nil)

    See: ~
        |warp.nvim.list.get.item_by_buf|

    Usage: ~
>lua
        require('warp').get_item_by_buf(0)
<


M.count                                                    *warp.nvim.api.count*
    Get the count of the items

    Type: ~
        (fun():number)

    See: ~
        |warp.nvim.list.get.count|

    Usage: ~
>lua
        require('warp').count()
<


==============================================================================
Configurations                                                *warp.nvim.config*

Configuration related implementations

Default Configuration:

>
{
  auto_prune = false,
  root_markers = { ".git" },
  root_detection_fn = require("warp.builtins").root_detection_fn,
  list_item_format_fn = require("warp.builtins").list_item_format_fn,
  keymaps = {
    quit = { "q", "<Esc>" },
    select = { "<CR>" },
    delete = { "dd" },
    move_up = { "<C-k>" },
    move_down = { "<C-j>" },
    show_help = { "g?" },
  },
 window = {
   list = {},
   help = {},
 },
}
<


M.config                                               *warp.nvim.config.config*

    Type: ~
        (Warp.Config)

    See: ~
        |warp.nvim.types.Warp.Config|


==============================================================================
List                                                            *warp.nvim.list*

List related implementations, important functions are re-exported to the main module.

M.init()                                                   *warp.nvim.list.init*
    Initialize the list by getting the data from storage and set it

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').init()
<


------------------------------------------------------------------------------

M.get.all()                                             *warp.nvim.list.get.all*
    Get all items

    Returns: ~
        (Warp.ListItem[])  The list of items

    See: ~
        |warp.nvim.types.Warp.ListItem|

    Usage: ~
>lua
        require('warp.list').get.all()
<


M.get.count()                                         *warp.nvim.list.get.count*
    Get the count of the items

    Returns: ~
        (number)  The count of items in the list

    Usage: ~
>lua
        require('warp.list').get.count()
<


M.get.item_by_index({index})                  *warp.nvim.list.get.item_by_index*
    Get a specific item by index

    Parameters: ~
        {index}  (number)  The index of the entry

    Returns: ~
        (Warp.ListItem|nil)  The entry item

    See: ~
        |warp.nvim.types.Warp.ListItem|

    Usage: ~
>lua
        require('warp.list').get.item_by_index(1)
<


M.get.item_by_buf({buf})                        *warp.nvim.list.get.item_by_buf*
    Find the index of an entry by buffer

    Parameters: ~
        {buf}  (number)  The buffer number

    Returns: ~
        ({entry:Warp.ListItem,index:number}|nil)  The entry item and index

    Usage: ~
>lua
        require('warp.list').get.item_by_buf(0)
<


------------------------------------------------------------------------------

M.action.set({data})                                 *warp.nvim.list.action.set*
    Set the list

    Parameters: ~
        {data}  (Warp.ListItem[])  The list of items

    Usage: ~
>lua
        require('warp.list').action.set(data)
<


M.action.on_file_update({from}, {to})     *warp.nvim.list.action.on_file_update*
    Update entries if file or folder was updated

    Parameters: ~
        {from}  (string)  The path of the file
        {to}    (string)  The path of the file

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').action.on_file_update(from, to)
<


                                      *warp.nvim.list.action.update_line_number*
M.action.update_line_number({index}, {cursor})

    Parameters: ~
        {index}   (number)    The index of the entry
        {cursor}  (number[])  The cursor position as {row, col}

    Returns: ~
        (boolean)  Whether the operation was successful

    Usage: ~
>lua
        require('warp.list').action.update_line_number(1, [1, 1])
<


M.action.insert({path}, {cursor})                 *warp.nvim.list.action.insert*
    Insert current buffer to current list

    Parameters: ~
        {path}    (string)    The path of the file
        {cursor}  (number[])  The cursor position as {row, col}

    Returns: ~
        (boolean)  Whether the operation was successful

    Usage: ~
>lua
        require('warp.list').insert(path, cursor)
<


M.action.remove_one({idx})                    *warp.nvim.list.action.remove_one*
    Remove an entry from the list

    Parameters: ~
        {idx}  (number)  The index of the entry

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').remove_one(idx)
<


                                           *warp.nvim.list.action.move_to_index*
M.action.move_to_index({from_idx}, {to_idx})
    Move an entry to a new index

    Parameters: ~
        {from_idx}  (number)  The index of the entry
        {to_idx}    (number)  The index of the entry

    Returns: ~
        (boolean)  Whether the operation was successful

    Usage: ~
>lua
        require('warp.list').action.move_to_index(1, 2)
<


M.action.prune()                                   *warp.nvim.list.action.prune*
    Prune missing files from list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').action.prune()
<


==============================================================================
Storage                                                      *warp.nvim.storage*

Storage related implementations

M.get_storage_dir()                          *warp.nvim.storage.get_storage_dir*
    Get the storage directory

    Returns: ~
        (string)  The storage directory

    Usage: ~
>lua
        require('warp.storage').get_storage_dir()
<


M.get_storage_path()                        *warp.nvim.storage.get_storage_path*
    Get a safe, unique JSON file path for the current working directory

    Returns: ~
        (string)  The storage path

    Usage: ~
>lua
        require('warp.storage').get_storage_path()
<


M.load({storage_path?})                                 *warp.nvim.storage.load*
    Load the data from the storage file and set it to the list

    Parameters: ~
        {storage_path?}  (string)  The path of the storage file

    Returns: ~
        (Warp.ListItem[])  The list of items

    Usage: ~
>lua
        require('warp.storage').load()
<


M.save({data?}, {storage_path?})                        *warp.nvim.storage.save*
    Save data to disk

    Parameters: ~
        {data?}          (Warp.ListItem[])  The list of items
        {storage_path?}  (string)           The path of the storage file

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.storage').save()
<


==============================================================================
UI                                                                *warp.nvim.ui*

UI related implementations

                                         *warp.nvim.ui.set_standard_buf_options*
M.set_standard_buf_options({bufnr}, {ft})
    Set standard buffer options

    Parameters: ~
        {bufnr}  (integer)  The buffer number
        {ft}     (string)   The filetype

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').set_standard_buf_options(bufnr, ft)
<


                                                 *warp.nvim.ui.render_warp_list*
M.render_warp_list({parent_item}, {warp_list}, {target_win?}, {active_bufnr?}, {ft_name})
    Render the warp list

    Parameters: ~
        {parent_item}    (Warp.ListItem|nil)  The parent item before open the window
        {warp_list}      (Warp.ListItem[])    The list of items
        {target_win?}    (integer)            The window number to render the list
        {active_bufnr?}  (integer)            The active buffer number
        {ft_name}        (string)             The filetype name

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').render_warp_list(parent_item, warp_list, target_win, active_bufnr, ft_name)
<


M.render_help({target_win?})                          *warp.nvim.ui.render_help*
    Render the help window

    Parameters: ~
        {target_win?}  (integer)  The window number to render the list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').render_help(target_win)
<


M.close_win({win?})                                     *warp.nvim.ui.close_win*
    Close a window

    Parameters: ~
        {win?}  (integer)  The window number

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').close_win(win)
<


M.is_ft_win_active({ft})                         *warp.nvim.ui.is_ft_win_active*
    Find if the the given filetype window is active and get it's detail

    Parameters: ~
        {ft}  (string)  The filetype

    Returns: ~
        (boolean)      window is active
        (integer|nil)  window id
        (integer|nil)  buffer id

    Usage: ~
>lua
        require('warp.ui').is_ft_win_active(ft)
<


                                         *warp.nvim.ui.get_formatted_list_items*
M.get_formatted_list_items({parent_item}, {warp_list})
    Render the entries as lines

    Parameters: ~
        {parent_item}  (Warp.ListItem|nil)  The parent item before open the window
        {warp_list}    (Warp.ListItem[])    The list of items

    Returns: ~
        (string[])                    The formatted lines
        (number|nil)                  The active index
        (Warp.FormattedLineOpts[][])  The raw data of the formatted lines

    Usage: ~
>lua
        require("warp.ui").get_formatted_list_items(parent_item, warp_list)
<


                                              *warp.nvim.ui.set_list_item_hl_fn*
M.set_list_item_hl_fn({bufnr}, {line_data})
    Set the highlight for the list items

    Parameters: ~
        {bufnr}      (number)                      The buffer number
        {line_data}  (Warp.FormattedLineOpts[][])  The formatted line data

    Returns: ~
        (nil)

    Usage: ~
>lua
        require("warp.ui").set_list_item_hl_fn(bufnr, lines, line_data)
<


M.get_formatted_help_lines()             *warp.nvim.ui.get_formatted_help_lines*

    Returns: ~
        (string[])                  The formatted lines
        (Warp.FormattedLineOpts[])  The formatted entry

    Usage: ~
>lua
        require('warp.ui').get_help_lines()
<


==============================================================================
Utilities                                                      *warp.nvim.utils*

Utilities related implementations

                                  *warp.nvim.utils.format_string_to_pascal_case*
M.format_string_to_pascal_case({str})
    Convert a string to PascalCase

    Parameters: ~
        {str}  (string)  The string to convert

    Returns: ~
        (string)  formatted string

    Usage: ~
>lua
        require('warp.utils').format_string_to_pascal_case("hello_world")
<


M.augroup({name})                                      *warp.nvim.utils.augroup*
    Create an augroup

    Parameters: ~
        {name}  (string)  The name of the augroup

    Returns: ~
        (integer)  augroup ID

    Usage: ~
>lua
        require('warp.utils').augroup("my_augroup")
<


M.file_exists({path})                              *warp.nvim.utils.file_exists*
    Check if a file exists

    Parameters: ~
        {path}  (string)  The path of the file

    Returns: ~
        (boolean)  Whether the file exists

    Usage: ~
>lua
        require('warp.utils').file_exists(path)
<


M.buf_set_keymap({bufnr}, {lhs}, {rhs})         *warp.nvim.utils.buf_set_keymap*
    Set a keymap for a buffer

    Parameters: ~
        {bufnr}  (number)  The buffer number
        {lhs}    (string)  The keymap
        {rhs}    (fun())   The function to execute

    Usage: ~
>lua
        require('warp.utils').buf_set_keymap(bufnr, lhs, rhs)
<


                                      *warp.nvim.utils.parse_direction_or_index*
M.parse_direction_or_index({direction_or_index}, {current_item_idx})
    Parse a direction_or_index to a number

    Parameters: ~
        {direction_or_index}  (Warp.Config.MoveDirection|number)  The direction or index to move to
        {current_item_idx}    (number|nil)                        The current index of the item

    Returns: ~
        (number|nil)  The parsed index

    Usage: ~
>lua
        require('warp.utils').parse_direction_or_index('prev')
<


M.get_all_onscreen_bufs()                *warp.nvim.utils.get_all_onscreen_bufs*
    Get all on screen visible buffers

    Returns: ~
        (number[])  The list of all on screen buffers

    Usage: ~
>lua
        require('warp.utils').get_all_onscreen_bufs()
<


                                        *warp.nvim.utils.parse_format_fn_result*
M.parse_format_fn_result({format_result})
    Parse a format result and ensure all in string

    Parameters: ~
        {format_result}  (table)  The format result

    Returns: ~
        (Warp.FormattedLineOpts[])  The parsed format result

    Usage: ~
>lua
        require('warp.utils').parse_format_fn_result(format_result)
<


                        *warp.nvim.utils.convert_parsed_format_result_to_string*
M.convert_parsed_format_result_to_string({parsed})
    Convert a parsed format result to string

    Parameters: ~
        {parsed}  (Warp.FormattedLineOpts[])  The parsed format result

    Returns: ~
        (string)  The formatted lines

    Usage: ~
>lua
        require('warp.utils').convert_parsed_format_result_to_string(parsed)
<


==============================================================================
Notifier                                                    *warp.nvim.notifier*

Notification related implementations

M.info({msg})                                          *warp.nvim.notifier.info*
    Info notification

    Parameters: ~
        {msg}  (string)  The message to display

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.notifier').info("Hello world")
<


M.warn({msg})                                          *warp.nvim.notifier.warn*
    Warn notification

    Parameters: ~
        {msg}  (string)  The message to display

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.notifier').warn("Hello world")
<


M.error({msg})                                        *warp.nvim.notifier.error*
    Error notification

    Parameters: ~
        {msg}  (string)  The message to display

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.notifier').error("Hello world")
<


==============================================================================
Builtins                                                    *warp.nvim.builtins*

Builtins related implementations

M.root_detection_fn()                     *warp.nvim.builtins.root_detection_fn*
    Find the root directory based on root markers, or fall back to cwd

    Returns: ~
        (string)  The root path

    Usage: ~
>lua
        require('warp.builtins').root_detection_fn()
<


                                        *warp.nvim.builtins.list_item_format_fn*
M.list_item_format_fn({entry}, {idx}, {is_active}, {is_file_exists})
    Default format for the entry lines for warp list

    Parameters: ~
        {entry}           (Warp.ListItem)  The entry item
        {idx}             (number)         The index of the entry
        {is_active}       (boolean|nil)    Whether the entry is active
        {is_file_exists}  (boolean|nil)    Whether the file exists in the system and reachable

    Returns: ~
        (Warp.FormattedLineOpts[])  The formatted entry

    Usage: ~
>lua
        require('warp.builtins').list_item_format_fn(entry, idx, is_active, is_file_exists)
<


                                        *warp.nvim.builtins.help_item_format_fn*
M.help_item_format_fn({keys}, {description})
    Default format for the entry lines for help

    Parameters: ~
        {keys}         (string[])
        {description}  (string)

    Returns: ~
        (Warp.FormattedLineOpts[])  The formatted entry

    Usage: ~
>lua
        require('warp.builtins').help_item_format_fn(keys, description)
<


==============================================================================
Events                                                        *warp.nvim.events*

Events related implementations

Warp.Events                                       *warp.nvim.events.Warp.Events*

    Fields: ~
        {open_list_win}        ("WarpOpenListWin")        When a list window is opened
        {close_list_win}       ("WarpCloseListWin")       When a list window is closed
        {added_to_list}        ("WarpAddedToList")        When a file is added to the list
        {removed_from_list}    ("WarpRemovedFromList")    When a file is removed from the list
        {moved_item_index}     ("WarpMovedItemIndex")     When an item is moved within list
        {updated_item_cursor}  ("WarpUpdatedItemCursor")  When a cursor for an item is updated


M.constants                                         *warp.nvim.events.constants*

    Type: ~
        (Warp.Events)


M.emit({event})                                          *warp.nvim.events.emit*
    Emit an event

    Parameters: ~
        {event}  (string)  The event name

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.events').emit("my_event")
<


==============================================================================
Types                                                          *warp.nvim.types*

                                     *warp.nvim.types.Warp.Config.MoveDirection*
Warp.Config.MoveDirection

    Variants: ~
        ("prev")
        ("next")
        ("first")
        ("last")


Warp.Config                                        *warp.nvim.types.Warp.Config*

    Fields: ~
        {auto_prune?}           (boolean)                                                             Whether to auto prune the list, defaults to false
        {root_markers?}         (string[])                                                            The root markers to check, defaults to { ".git" } and fallback to cwd, set to {} to nil it
        {root_detection_fn?}    (fun():string)                                                        The function to detect the root, defaults to `require("warp.storage").find_project_root`
        {list_item_format_fn?}  (fun(entry:Warp.ListItem,idx:number,is_active:boolean|nil):string[])  The function to format the list items lines, defaults to `require("warp.ui").default_list_item_format`
        {keymaps?}              (Warp.Config.Keymaps)                                                 The keymaps for actions
        {window?}               (Warp.Config.Window)                                                  The windows configurations


Warp.Config.Keymaps                        *warp.nvim.types.Warp.Config.Keymaps*

    Fields: ~
        {quit?}              (string[])
        {select?}            (string[])
        {delete?}            (string[])
        {move_up?}           (string[])
        {move_down?}         (string[])
        {split_horizontal?}  (string[])
        {split_vertical?}    (string[])
        {show_help?}         (string[])


Warp.ListItem                                    *warp.nvim.types.Warp.ListItem*

    Fields: ~
        {path}    (string)    The path of the file
        {cursor}  (number[])  The cursor position as {row, col}


Warp.FormattedLineOpts                  *warp.nvim.types.Warp.FormattedLineOpts*

    Fields: ~
        {display_text}  (string)  The display text
        {hl_group?}     (string)  The highlight group of the text
        {col_start?}    (number)  The start column of the text, NOTE: this is calculated and for type purpose only
        {col_end?}      (number)  The end column of the text, NOTE: this is calculated and for type purpose only


Warp.Config.Window                          *warp.nvim.types.Warp.Config.Window*

    Fields: ~
        {list?}  (vim.api.keyset.win_config|fun(lines:string[]):vim.api.keyset.win_config)  The window configurations for the list window
        {help?}  (vim.api.keyset.win_config|fun(lines:string[]):vim.api.keyset.win_config)  The window configurations for the help window


vim:tw=78:ts=8:noet:ft=help:norl:
