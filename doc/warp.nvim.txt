*warp.nvim.txt*

Warp is a lightweight project-local buffer list for Neovim — add, view, jump, reorder, and remove buffers, all from a floating window.

`warp.nvim` provides a per-project list of important files, allowing you to quickly return to them later. think of it as “buffer bookmarks,” scoped to your git repo (or any project root).

It's inspired by https://github.com/ThePrimeagen/harpoon, but with a simpler goal: do one thing well. No terminals, no fancy workflows — just files you care about, saved per project.

==============================================================================
Table of Contents                                                *warp.nvim.toc*

API ···························································· |warp.nvim.api|
Configurations ·············································· |warp.nvim.config|
List ·························································· |warp.nvim.list|
Storage ···················································· |warp.nvim.storage|
UI ······························································ |warp.nvim.ui|
Utilities ···················································· |warp.nvim.utils|
Notifier ·················································· |warp.nvim.notifier|
Builtins ·················································· |warp.nvim.builtins|
Events ······················································ |warp.nvim.events|
Types ························································ |warp.nvim.types|

==============================================================================
API                                                              *warp.nvim.api*

M.setup                                                    *warp.nvim.api.setup*
    Entry point to setup the plugin

    Type: ~
        (fun(user_config?:Warp.Config))

    See: ~
        |warp.nvim.config.config|
        |warp.nvim.types.Warp.Config|

    Usage: ~
>lua
        require('warp').setup(opts)
<


M.add()                                                      *warp.nvim.api.add*
    Add or update current buffer in list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').add() or ':WarpAddFile'
<


M.del()                                                      *warp.nvim.api.del*
    Remove current buffer from warp list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').del() or ':WarpDelFile'
<


M.move_to({direction_or_index})                          *warp.nvim.api.move_to*
    Move current buffer to a new index in list

    Parameters: ~
        {direction_or_index}  (Warp.Config.MoveDirection|number)

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').move_to('prev') or ':WarpMoveTo prev'
<


M.show_list()                                          *warp.nvim.api.show_list*
    Show the list item in window

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').show_list() or ':WarpShowList'
<


M.clear_current_list()                        *warp.nvim.api.clear_current_list*
    Clear current project's list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').clear_current_list()
<


M.clear_all_list()                                *warp.nvim.api.clear_all_list*
    Clear all the lists across all projects

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').clear_all_list()
<


M.goto_index({direction_or_index})                    *warp.nvim.api.goto_index*
    Navigate to a file from warp list by index or direction

    Parameters: ~
        {direction_or_index}  (Warp.Config.MoveDirection|number)

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp').goto_index(1) or ':WarpGoToIndex 1'
<


M.on_file_update                                  *warp.nvim.api.on_file_update*
    Update entries if file or folder was updated

    Type: ~
        (fun(from:string,to:string):nil)

    See: ~
        |warp.nvim.list.action.on_file_update|

    Usage: ~
>lua
        vim.api.nvim_create_autocmd("User", {
          group = augroup,
          pattern = { "MiniFilesActionRename", "MiniFilesActionMove" },
          callback = function(ev)
            local from, to = ev.data.from, ev.data.to
            require("warp").on_file_update(from, to)
          end,
        })
<


M.get_item_by_buf                                *warp.nvim.api.get_item_by_buf*
    Find the item of an entry by buffer

    Type: ~
        (fun(buf:number):{entry:Warp.ListItem,index:number}|nil)

    See: ~
        |warp.nvim.list.get.item_by_buf|

    Usage: ~
>lua
        require('warp').get.item_by_buf(0)
<


M.count                                                    *warp.nvim.api.count*
    Get the count of the items

    Type: ~
        (fun():number)

    See: ~
        |warp.nvim.list.count|

    Usage: ~
>lua
        require('warp').count()
<


==============================================================================
Configurations                                                *warp.nvim.config*

Configuration related implementations

Default Configuration:

>
{
  root_markers = { ".git" },
  root_detection_fn = require("warp.builtins").root_detection_fn,
  list_item_format_fn = require("warp.builtins").list_item_format_fn,
  keymaps = {
    quit = { "q", "<Esc>" },
    select = { "<CR>" },
    delete = { "dd" },
    move_up = { "<C-k>" },
    move_down = { "<C-j>" },
  },
 float_opts = {
   width = 0.5,
   height = 0.5,
   relative = "editor",
   title_pos = "left",
 },
}
<


M.config                                               *warp.nvim.config.config*

    Type: ~
        (Warp.Config)

    See: ~
        |warp.nvim.types.Warp.Config|


==============================================================================
List                                                            *warp.nvim.list*

List related implementations, important functions are re-exported to the main module.

M.init()                                                   *warp.nvim.list.init*
    Initialize the list by getting the data from storage and set it

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').init()
<


------------------------------------------------------------------------------

M.get.all()                                             *warp.nvim.list.get.all*
    Get all items

    Returns: ~
        (Warp.ListItem[])

    See: ~
        |warp.nvim.types.Warp.ListItem|

    Usage: ~
>lua
        require('warp.list').get.all()
<


M.get.count()                                         *warp.nvim.list.get.count*
    Get the count of the items

    Returns: ~
        (number)

    Usage: ~
>lua
        require('warp.list').get.count()
<


M.get.item_by_index({index})                  *warp.nvim.list.get.item_by_index*
    Get a specific item by index

    Parameters: ~
        {index}  (number)

    Returns: ~
        (Warp.ListItem|nil)

    See: ~
        |warp.nvim.types.Warp.ListItem|

    Usage: ~
>lua
        require('warp.list').get_item.by_index(1)
<


M.get.item_by_buf({buf})                        *warp.nvim.list.get.item_by_buf*
    Find the index of an entry by buffer

    Parameters: ~
        {buf}  (number)

    Returns: ~
        ({entry:Warp.ListItem,index:number}|nil)

    Usage: ~
>lua
        require('warp.list').get_item.by_buf(0)
<


------------------------------------------------------------------------------

M.action.set({data})                                 *warp.nvim.list.action.set*
    Set the list

    Parameters: ~
        {data}  (Warp.ListItem[])

    Usage: ~
>lua
        require('warp.list').action.set(data)
<


M.action.on_file_update({from}, {to})     *warp.nvim.list.action.on_file_update*
    Update entries if file or folder was updated

    Parameters: ~
        {from}  (string)
        {to}    (string)

    Returns: ~
        (nil)

    Usage: ~
>lua
        vim.api.nvim_create_autocmd("User", {
          group = augroup,
          pattern = { "MiniFilesActionRename", "MiniFilesActionMove" },
          callback = function(ev)
            local from, to = ev.data.from, ev.data.to
            require("warp").on_file_update(from, to)
          end,
        })
<


                                        *warp.nvim.list.action.insert_or_update*
M.action.insert_or_update({path}, {current_line})
    Insert or update current buffer in list

    Parameters: ~
        {path}          (string)
        {current_line}  (number)

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').insert_or_update(path, current_line)
<


M.action.remove_one({idx})                    *warp.nvim.list.action.remove_one*
    Remove an entry from the list

    Parameters: ~
        {idx}  (number)

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').remove_one(idx)
<


                                           *warp.nvim.list.action.move_to_index*
M.action.move_to_index({from_idx}, {to_idx})
    Move an entry to a new index

    Parameters: ~
        {from_idx}  (number)
        {to_idx}    (number)

    Returns: ~
        (boolean)

    Usage: ~
>lua
        require('warp.list').action.move_to_index(1, 2)
<


M.action.prune()                                   *warp.nvim.list.action.prune*
    Prune missing files from list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.list').action.prune()
<


==============================================================================
Storage                                                      *warp.nvim.storage*

Storage related implementations

M.get_storage_dir()                          *warp.nvim.storage.get_storage_dir*
    Get the storage directory

    Returns: ~
        (string)

    Usage: ~
>lua
        require('warp.storage').get_storage_dir()
<


M.get_storage_path()                        *warp.nvim.storage.get_storage_path*
    Get a safe, unique JSON file path for the current working directory

    Returns: ~
        (string)

    Usage: ~
>lua
        require('warp.storage').get_storage_path()
<


M.load({storage_path?})                                 *warp.nvim.storage.load*
    Load the data from the storage file and set it to the list

    Parameters: ~
        {storage_path?}  (string)

    Returns: ~
        (Warp.ListItem[])

    Usage: ~
>lua
        require('warp.storage').load()
<


M.save({data?}, {storage_path?})                        *warp.nvim.storage.save*
    Save data to disk

    Parameters: ~
        {data?}          (Warp.ListItem[])
        {storage_path?}  (string)

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.storage').save()
<


==============================================================================
UI                                                                *warp.nvim.ui*

UI related implementations

                                          *warp.nvim.ui.create_native_float_win*
M.create_native_float_win({bufnr}, {title?}, {target_win?})
    Create a floating window for native

    Parameters: ~
        {bufnr}        (integer)  The buffer to open
        {title?}       (string)   The title appended after `Time Machine`
        {target_win?}  (integer)  The window number to render the list

    Returns: ~
        (integer|nil)  The window handle

    Usage: ~
>lua
        require('warp.ui').create_native_float_win(bufnr, title, target_win)
<


                                         *warp.nvim.ui.set_standard_buf_options*
M.set_standard_buf_options({bufnr}, {ft})
    Set standard buffer options

    Parameters: ~
        {bufnr}  (integer)  The buffer number
        {ft}     (string)   The filetype

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').set_standard_buf_options(bufnr, ft)
<


                                                 *warp.nvim.ui.render_warp_list*
M.render_warp_list({parent_item}, {warp_list}, {target_win?})

    Parameters: ~
        {parent_item}  (Warp.ListItem|nil)  The parent item before open the window
        {warp_list}    (Warp.ListItem[])
        {target_win?}  (integer)            The window number to render the list

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').render_warp_list(parent_item, warp_list, target_win)
<


M.close_win({win?})                                     *warp.nvim.ui.close_win*
    Close a window

    Parameters: ~
        {win?}  (integer)  The window number

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.ui').close_win(win)
<


M.is_warp_list_win_active()               *warp.nvim.ui.is_warp_list_win_active*
    Find if the warp list window is active and get it's detail

    Returns: ~
        (boolean)      window is active
        (integer|nil)  window id
        (integer|nil)  buffer id

    Usage: ~
>lua
        require('warp.ui').is_warp_list_win_active()
<


                                         *warp.nvim.ui.get_formatted_list_items*
M.get_formatted_list_items({parent_item}, {warp_list})
    Render the entries as lines

    Parameters: ~
        {parent_item}  (Warp.ListItem|nil)  The parent item before open the window
        {warp_list}    (Warp.ListItem[])

    Returns: ~
        (string[])    lines
        (number|nil)  active_idx

    Usage: ~
>lua
        require("warp.ui").get_formatted_list_items(parent_item, warp_list)
<


==============================================================================
Utilities                                                      *warp.nvim.utils*

Utilities related implementations

                                  *warp.nvim.utils.format_string_to_pascal_case*
M.format_string_to_pascal_case({str})
    Convert a string to PascalCase

    Parameters: ~
        {str}  (string)

    Returns: ~
        (string)

    Usage: ~
>lua
        require('warp.utils').format_string_to_pascal_case("hello_world")
<


M.augroup({name})                                      *warp.nvim.utils.augroup*
    Create an augroup

    Parameters: ~
        {name}  (string)  The name of the augroup

    Returns: ~
        (integer)  augroup ID

    Usage: ~
>lua
        require('warp.utils').augroup("my_augroup")
<


M.file_exists({path})                              *warp.nvim.utils.file_exists*
    Check if a file exists

    Parameters: ~
        {path}  (string)

    Returns: ~
        (boolean)

    Usage: ~
>lua
        require('warp.utils').file_exists(path)
<


M.buf_set_keymap({bufnr}, {lhs}, {rhs})         *warp.nvim.utils.buf_set_keymap*
    Set a keymap for a buffer

    Parameters: ~
        {bufnr}  (number)
        {lhs}    (string)
        {rhs}    (fun())

    Usage: ~
>lua
        require('warp.utils').buf_set_keymap(bufnr, lhs, rhs)
<


                                      *warp.nvim.utils.parse_direction_or_index*
M.parse_direction_or_index({direction_or_index}, {current_item_idx})
    Parse a direction_or_index to a number

    Parameters: ~
        {direction_or_index}  (Warp.Config.MoveDirection|number)
        {current_item_idx}    (number|nil)

    Returns: ~
        (number|nil)

    Usage: ~
>lua
        require('warp.utils').parse_direction_or_index('prev')
<


==============================================================================
Notifier                                                    *warp.nvim.notifier*

Notification related implementations

M.info({msg})                                          *warp.nvim.notifier.info*
    Info notification

    Parameters: ~
        {msg}  (string)

    Usage: ~
>lua
        require('warp.notifier').info("Hello world")
<


M.warn({msg})                                          *warp.nvim.notifier.warn*
    Warn notification

    Parameters: ~
        {msg}  (string)

    Usage: ~
>lua
        require('warp.notifier').warn("Hello world")
<


M.error({msg})                                        *warp.nvim.notifier.error*
    Error notification

    Parameters: ~
        {msg}  (string)

    Usage: ~
>lua
        require('warp.notifier').error("Hello world")
<


==============================================================================
Builtins                                                    *warp.nvim.builtins*

Builtins related implementations

M.root_detection_fn()                     *warp.nvim.builtins.root_detection_fn*
    Find the root directory based on root markers, or fall back to cwd

    Returns: ~
        (string)

    Usage: ~
>lua
        require('warp.builtins').root_detection_fn()
<


                                        *warp.nvim.builtins.list_item_format_fn*
M.list_item_format_fn({entry}, {idx}, {is_active})
    Default format for the entry lines

    Parameters: ~
        {entry}      (Warp.ListItem)
        {idx}        (number)
        {is_active}  (boolean|nil)

    Returns: ~
        (string)

    Usage: ~
>lua
        require('warp.builtins').list_item_format_fn(entry, idx, is_active)
<


==============================================================================
Events                                                        *warp.nvim.events*

Events related implementations

Warp.Events                                       *warp.nvim.events.Warp.Events*

    Fields: ~
        {open_list_win}      ("WarpOpenListWin")      When a list window is opened
        {close_list_win}     ("WarpCloseListWin")     When a list window is closed
        {added_to_list}      ("WarpAddedToList")      When a file is added to the list
        {removed_from_list}  ("WarpRemovedFromList")  When a file is removed from the list
        {moved_item_index}   ("WarpMovedItemIndex")   When an item is moved within list


M.constants                                         *warp.nvim.events.constants*

    Type: ~
        (Warp.Events)


M.emit({event})                                          *warp.nvim.events.emit*
    Emit an event

    Parameters: ~
        {event}  (string)  The event name

    Returns: ~
        (nil)

    Usage: ~
>lua
        require('warp.utils').emit_event("my_event")
<


==============================================================================
Types                                                          *warp.nvim.types*

                                *warp.nvim.types.Warp.Config.FloatOpts.Relative*
Warp.Config.FloatOpts.Relative

    Variants: ~
        ("cursor")
        ("editor")
        ("laststatus")
        ("mouse")
        ("tabline")
        ("win")


                                  *warp.nvim.types.Warp.Config.FloatOpts.Anchor*
Warp.Config.FloatOpts.Anchor

    Variants: ~
        ("NE")
        ("NW")
        ("SE")
        ("SW")


                                  *warp.nvim.types.Warp.Config.FloatOpts.Border*
Warp.Config.FloatOpts.Border

    Variants: ~
        ("double")
        ("none")
        ("rounded")
        ("shadow")
        ("single")
        ("solid")


                                *warp.nvim.types.Warp.Config.FloatOpts.TitlePos*
Warp.Config.FloatOpts.TitlePos

    Variants: ~
        ("left")
        ("center")
        ("right")


                                     *warp.nvim.types.Warp.Config.MoveDirection*
Warp.Config.MoveDirection

    Variants: ~
        ("prev")
        ("next")
        ("first")
        ("last")


Warp.Config                                        *warp.nvim.types.Warp.Config*

    Fields: ~
        {root_markers?}         (string[])                                                          The root markers to check, defaults to { ".git" } and fallback to cwd, set to {} to nil it
        {root_detection_fn?}    (fun():string)                                                      The function to detect the root, defaults to `require("warp.storage").find_project_root`
        {list_item_format_fn?}  (fun(entry:Warp.ListItem,idx:number,is_active:boolean|nil):string)  The function to format the list items lines, defaults to `require("warp.ui").default_list_item_format`
        {keymaps?}              (Warp.Config.Keymaps)                                               The keymaps for actions
        {float_opts?}           (Warp.Config.FloatOpts)                                             The floating window options


Warp.Config.Keymaps                        *warp.nvim.types.Warp.Config.Keymaps*

    Fields: ~
        {quit?}       (string[])
        {select?}     (string[])
        {delete?}     (string[])
        {move_up?}    (string[])
        {move_down?}  (string[])


Warp.Config.FloatOpts                    *warp.nvim.types.Warp.Config.FloatOpts*

    Fields: ~
        {width?}      (integer)                         The width of the window, more than 1 = absolute, less than 1 = calculated percentage
        {height?}     (integer)                         The height of the window, more than 1 = absolute, less than 1 = calculated percentage
        {relative?}   (Warp.Config.FloatOpts.Relative)  The relative position of the window, defaults to "editor"
        {anchor?}     (Warp.Config.FloatOpts.Anchor)    The anchor position of the window, no default
        {title_pos?}  (Warp.Config.FloatOpts.TitlePos)  The position of the title, defaults to "left"
        {border?}     (Warp.Config.FloatOpts.Border)    The border style of the window, no default
        {zindex?}     (integer)                         The z-index of the window, no default
        {focusable?}  (boolean)                         Whether the window is focusable, no default


Warp.ListItem                                    *warp.nvim.types.Warp.ListItem*

    Fields: ~
        {path}  (string)  The path of the file
        {line}  (number)  The line number of the file


vim:tw=78:ts=8:noet:ft=help:norl:
